# -*- coding: utf-8 -*-
"""Predict_Stock 20220425.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JfvcQldxMljV1fllYEHtEsB5xlIGpoPW
"""
"""# Import Library"""

import keras
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from keras.layers.core import Dense
from keras.layers.recurrent import LSTM
from keras.models import Sequential
from sklearn.preprocessing import MinMaxScaler

"""# Define Function we need"""


class Action():
    def __init__(self, buy_price, current_holding_stock, last_day_price):
        self.buy_price = buy_price  # current_price
        self.current_holding_stock = current_holding_stock  # current_stock
        self.last_day_price = last_day_price  # yesterdays prices
        self.action_list = []  # Save log with action

    def action(self, prices):
        for i in range(prices.shape[0] - 1):
            self.last_day_price = prices[i]
            if i == 0:  # skip first day, Because of no last day data
                self.action_list.append(0)
            else:
                if self.current_holding_stock == 1:
                    if prices[i + 1] >= self.buy_price:
                        self.buy_price = 0
                        self.action_list.append(-1)
                        self.current_holding_stock -= 1
                    else:
                        self.action_list.append(0)
                elif self.current_holding_stock == 0:
                    if prices[i + 1] < self.last_day_price:
                        self.buy_price = prices[i + 1]
                        self.action_list.append(1)
                        self.current_holding_stock += 1
                    elif prices[i + 1] > self.last_day_price:
                        self.buy_price = prices[i + 1]
                        self.action_list.append(-1)
                        self.current_holding_stock -= 1
                    else:
                        self.action_list.append(0)
                elif self.current_holding_stock == -1:
                    if prices[i + 1] <= self.buy_price:
                        self.buy_price = 0
                        self.action_list.append(1)
                        self.current_holding_stock += 1
                    else:
                        self.action_list.append(0)
        return self.action_list


def load_data():
    train = pd.read_csv('training.csv', header=None)  # 1488 rows x 4 columns
    test = pd.read_csv('testing.csv', header=None)
    train = pd.concat([train, test], axis=0)  # 1508 rows x 4 columns
    return train, test


def gain_feature(train, num_feature):
    trainSet = train.iloc[:, num_feature]  # 1508 rows x 1 columns
    return trainSet


def Scaler(scale, trainSet, price, inverse):
    if inverse == False:
        train_set = trainSet.values.reshape(-1, 1)
        train_set_scaled = scale.fit_transform(train_set)
        return train_set_scaled  # 1508 rows x 1 columns
    else:
        return scale.inverse_transform(price)


def create_train_data(train_set_scaled, train_days_prices):  # train_set_scaled.shape [1508, 0]
    training_data = train_set_scaled[:-20]  # train_set_scaled[0, 0] to train_set_scaled[1488, 0]
    X_train = []
    Y_train = []
    for i in range(train_days_prices, len(training_data), 1):
        X_train.append(training_data[i - train_days_prices: i,
                       0])  # gain data from train_set_scaled[0, 0] to train_set_scaled[1488, 0]
        Y_train.append(training_data[i, 0])  # gain data from train_set_scaled[15, 0] to train_set_scaled[1488, 0]

    X_train, Y_train = np.array(X_train), np.array(Y_train)  # X: (1473, 15) Y: (1473,)
    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
    Y_train = np.reshape(Y_train, (Y_train.shape[0], 1))
    return X_train, Y_train


def create_test_data(train_set_scaled, train_days_prices):
    testing_data = train_set_scaled[-35:]  # train_set_scaled[1473, 0] to train_set_scaled[1508, 0]
    X_test = []
    Y_test = []

    for i in range(train_days_prices, len(testing_data)):
        X_test.append(testing_data[i - train_days_prices: i,
                      0])  # gain data from train_set_scaled[0, 0] to train_set_scaled[20, 0]
        Y_test.append(testing_data[i, 0])  # gain data from train_set_scaled[15, 0] to train_set_scaled[35, 0]

    X_test, Y_test = np.array(X_test), np.array(Y_test)  # X: (1473, 15) Y: (1473, )
    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
    Y_test = np.reshape(Y_test, (Y_test.shape[0], 1))
    return X_test, Y_test


def Model(X_train, y_train):
    keras.backend.clear_session()
    Model = Sequential()
    Model.add(LSTM(units=16,
                   batch_input_shape=(1, X_train.shape[1], 1),
                   stateful=True
                   ))
    Model.add(Dense(units=1))
    Model.compile(optimizer='adam', loss='mean_squared_error')
    Model.fit(X_train, y_train, epochs=10, batch_size=1)
    return Model

if __name__ == '__main__':

    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--training',
                        default='training_data.csv',
                        help='input training data file name')
    parser.add_argument('--testing',
                        default='testing_data.csv',
                        help='input testing data file name')
    parser.add_argument('--output',
                        default='output.csv',
                        help='output file name')
    args = parser.parse_args()

    """# Main program"""

    num_feature = 3  # define close price as our training feature
    train_days_prices = 15  # Use 15 days to train model, in order to predict the next day
    scale = MinMaxScaler(feature_range=(0, 1))  # init MinMaxScaler()

    train, test = load_data()  # Load Data
    trainSet = gain_feature(train, num_feature)  # gain feature of data with close price
    train_set_scaled = Scaler(scale, trainSet, 0, inverse=False)  # data with scale range about -1 to 1
    X_train, Y_train = create_train_data(train_set_scaled, train_days_prices)  # create train dataset
    X_test, Y_test = create_test_data(train_set_scaled, train_days_prices)  # create test dataset

    predict_stock_price = Model(X_train, Y_train).predict(X_test, batch_size=1)  # start to train our model of LSTM

    """# Visualization"""

    predict_stock_price = Scaler(scale, trainSet, predict_stock_price, inverse=True)
    test_stock_price = test.iloc[:, 0].values
    plt.plot(predict_stock_price, color='red', label='predict')
    plt.plot(test_stock_price, color='black', label='ans')
    plt.legend()
    plt.show()

    """# OutPut Prediction"""

    ac = Action(buy_price=0, current_holding_stock=0, last_day_price=0)
    output_action = ac.action(predict_stock_price)

    with open(args.output, 'w') as output_file:
        for i in range(len(output_action)):
            output_file.writelines(str(output_action[i]) + "\n")


